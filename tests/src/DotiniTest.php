<?php

namespace Dotini;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-02-15 at 16:24:34.
 */
class DotiniTest extends \PHPUnit\Framework\TestCase {

	/**
	 * @covers Dotini\Dotini::__construct
	 * @covers Dotini\Dotini::load
	 * @expectedException ErrorException
	 * @expectedExceptionMessage File
	 */
	public function testNoFile() {
		$object = new Dotini();
		$object->load('no_file.ini');
	}

	/**
	 * @covers Dotini\Dotini::__construct
	 * @covers Dotini\Dotini::load
	 * @expectedException ErrorException
	 * @expectedExceptionMessage Parse error
	 */
	public function testBadFile() {
		$object = new Dotini();
		$object->load(__DIR__ . '/bad.ini');
	}

	/**
	 * @covers Dotini\Dotini::__construct
	 * @covers Dotini\Dotini::_array
	 * @covers Dotini\Dotini::_convert
	 * @covers Dotini\Dotini::_include
	 * @covers Dotini\Dotini::_resolve
	 * @covers Dotini\Dotini::_substitute
	 * @covers Dotini\Dotini::load
	 * @covers Dotini\Dotini::set
	 */
	public function testDefaultFile() {
//		$object = new Dotini();
		$ini = Dotini::set(__DIR__);
		$this->assertEquals('somevalue', $ini['section']['somekey']);
	}

	/**
	 * @covers Dotini\Dotini::__construct
	 * @covers Dotini\Dotini::_array
	 * @covers Dotini\Dotini::_convert
	 * @covers Dotini\Dotini::_include
	 * @covers Dotini\Dotini::_resolve
	 * @covers Dotini\Dotini::_substitute
	 * @covers Dotini\Dotini::load
	 */
	public function testSimpleFile() {
		$object = new Dotini();
		$ini = $object->load(__DIR__ . '/simple.ini');

		$this->assertEquals('value', $ini['string']['direct']);
		$this->assertEquals('the long string', $ini['string']['spaced']);
		$this->assertEquals("line 1
line 2
line 3
", $ini['string']['multiline']);

		$this->assertEquals(true, $ini['keywords']['onn']);
		$this->assertEquals(false, $ini['keywords']['offf']);
		$this->assertEquals(true, $ini['keywords']['trued']);
		$this->assertEquals(false, $ini['keywords']['falsed']);
		$this->assertEquals(true, $ini['keywords']['yess']);
		$this->assertEquals(false, $ini['keywords']['noo']);
		$this->assertEquals(false, $ini['keywords']['noned']);
		$this->assertNull($ini['keywords']['nulled']);
		$this->assertEquals('enabled', $ini['keywords']['enabled']);
		$this->assertEquals('disabled', $ini['keywords']['disabled']);

		$this->assertEquals(42.42, $ini['numeric']['float']);
		$this->assertEquals(42.42, $ini['numeric']['real']);
		$this->assertEquals(42.42, $ini['numeric']['double']);
		$this->assertEquals(42, $ini['numeric']['int']);
		$this->assertEquals(42, $ini['numeric']['integer']);

		$this->assertEquals([1, 2], $ini['arrays']['stack']);
		$this->assertEquals(['one' => 'first', 'two' => 'second'], $ini['arrays']['named']);
	}

	/**
	 * @covers Dotini\Dotini::__construct
	 * @covers Dotini\Dotini::_array
	 * @covers Dotini\Dotini::_convert
	 * @covers Dotini\Dotini::_include
	 * @covers Dotini\Dotini::_resolve
	 * @covers Dotini\Dotini::_substitute
	 * @covers Dotini\Dotini::load
	 */
	public function testComplexFile() {
		$object = new Dotini();
		define('BIRD', 'Dodo');
		$ini = $object->load(__DIR__ . '/complex.ini');

		$this->assertEquals('Dodo', $ini['constant']);
		$this->assertEquals('BIRD', $ini['screened']);
		$this->assertEquals(getenv('PATH'), $ini['from_env']);
		$this->assertEquals($_SERVER['SCRIPT_FILENAME'], $ini['from_server']);
		$this->assertEquals('', $ini['unknown']);
		$this->assertEquals('value', $ini['setit']);
		$this->assertEquals('value', $ini['known']);
	}

	/**
	 * @covers Dotini\Dotini::__construct
	 * @covers Dotini\Dotini::_array
	 * @covers Dotini\Dotini::_convert
	 * @covers Dotini\Dotini::_include
	 * @covers Dotini\Dotini::_resolve
	 * @covers Dotini\Dotini::_substitute
	 * @covers Dotini\Dotini::load
	 */
	public function testNestedFile() {
		$object = new Dotini();
		$ini = $object->load(__DIR__ . '/nest.ini');

		$this->assertInternalType('array', $ini['nested']);
		$this->assertEquals(['key' => 'value', 'subsection' => ['key' => 'value']], $ini['nested']);
		$this->assertEquals(['back' => 'value', 'slash' => 'value'], $ini['smart']);
	}

	/**
	 * @covers Dotini\Dotini::__construct
	 * @covers Dotini\Dotini::_array
	 * @covers Dotini\Dotini::_convert
	 * @covers Dotini\Dotini::_include
	 * @covers Dotini\Dotini::_resolve
	 * @covers Dotini\Dotini::_substitute
	 * @covers Dotini\Dotini::load
	 */
	public function testConstants() {
		$object = new Dotini(true);
		$ini = $object->load(__DIR__ . '/nest.ini');

		
		$this->assertFalse(defined('NESTED'));
		$this->assertTrue(defined('FOO'));
		$this->assertEquals('bar', FOO);
		$this->assertTrue(defined('nested\\KEY'));
		$this->assertEquals('value', \nested\KEY);
		$this->assertTrue(defined('nested\\subsection\\KEY'));
		$this->assertEquals('value', \nested\subsection\KEY);
	}
}
